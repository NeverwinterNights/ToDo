{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","Login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","SetInitializedAC","appReducer","removeTodolistAC","filter","tl","addTodolistAC","unshift","todolist","entityStatus","changeTodolistTitleAC","index","findIndex","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","splice","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","changeTaskEntityStatusAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","catch","finally","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","activateViewMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","todoEntityStatus","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","resultCode","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","height","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd89bf44.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '7c38f700-eae7-4224-81a9-9392ebf67fbb'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data);\r\n\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ data: DataType }>>(`/auth/me`);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// types\r\nexport type DataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? {error: error.message} : {error: 'Some error'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n// type InitialStateType = typeof initialState\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// export const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'login/SET-IS-LOGGED-IN':\r\n//             return {...state, isLoggedIn: action.value}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\n// export const setIsLoggedInAC = (value: boolean) =>\r\n//     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\n// export const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n\r\n                // dispatch(setIsLoggedInAC(true))\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// export const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n\r\n                // dispatch(setIsLoggedInAC(false))\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\n//  type ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../Login/authReducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        SetInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    }\r\n})\r\n\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n\r\n// export const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'APP/SET-STATUS':\r\n//             return {...state, status: action.payload.status}\r\n//         case 'APP/SET-ERROR':\r\n//             return {...state, error: action.payload.error}\r\n//         case \"APP/SET-INITIALIZED\": {\r\n//             return {...state, isInitialized: action.payload.isInitialized}\r\n//         }\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n// export const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n// export const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n// export const SetInitializedAC = (isInitialized: boolean) => ({\r\n//     type: 'APP/SET-INITIALIZED',\r\n//     isInitialized\r\n// } as const)\r\n\r\n// export const setAppErrorAC = slice.actions.setAppErrorAC\r\n// export const setAppStatusAC = slice.actions.setAppStatusAC\r\n// export const SetInitializedAC = slice.actions.SetInitializedAC\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, SetInitializedAC} = slice.actions\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetInitializedAppActionType = ReturnType<typeof SetInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetInitializedAppActionType\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.me().then(res => {\r\n\r\n        if (res.data.resultCode === 0) {\r\n\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n\r\n        }\r\n    })\r\n        .finally(() => {\r\n            dispatch(SetInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            state.filter(tl => tl.id !== action.payload.id)\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n\r\n\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n} = slice.actions\r\n\r\n\r\n// export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TODOLIST':\r\n//             return state.filter(tl => tl.id !== action.id)\r\n//         case 'ADD-TODOLIST':\r\n//             return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n//\r\n//         case 'CHANGE-TODOLIST-TITLE':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n//         case 'CHANGE-TODOLIST-FILTER':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n//         case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n//         case 'SET-TODOLISTS':\r\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\n// export const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n// export const addTodolistAC = (todolist: TodolistType) => ({\r\n//     type: 'ADD-TODOLIST',\r\n//     todolist\r\n// } as const)\r\n// export const changeTodolistTitleAC = (id: string, title: string) => ({\r\n//     type: 'CHANGE-TODOLIST-TITLE',\r\n//     id,\r\n//     title\r\n// } as const)\r\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n//     type: 'CHANGE-TODOLIST-FILTER',\r\n//     id,\r\n//     filter\r\n// } as const)\r\n//\r\n// export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n//     type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n// } as const)\r\n// export const setTodolistsAC = (todolists: Array<TodolistType>) => ({\r\n//     type: 'SET-TODOLISTS',\r\n//     todolists\r\n// } as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id:todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist:res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({title:title, id: id}))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type ChangeTodolistActionType = ReturnType<typeof changeTodolistEntityStatusAC>;\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\n// type ActionsType =\r\n//     | ChangeTodolistActionType\r\n//     | RemoveTodolistActionType\r\n//     | AddTodolistActionType\r\n//     | ReturnType<typeof changeTodolistTitleAC>\r\n//     | ReturnType<typeof changeTodolistFilterAC>\r\n//     | SetTodolistsActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n// type ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {\r\n    addTodolistAC,\r\n    AddTodolistActionType,\r\n    ChangeTodolistActionType,\r\n    changeTodolistEntityStatusAC, removeTodolistAC,\r\n    RemoveTodolistActionType, setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI, TodolistType,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from '../../app/app-reducer'\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift({\r\n                ...action.payload.task,\r\n                entityStatus: \"idle\"\r\n            })\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks.map(task => ({\r\n                ...task,\r\n                entityStatus: \"idle\"\r\n            }))\r\n        },\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, entityStatus: RequestStatusType }>) {\r\n            state[action.payload.todolistId] = state[action.payload.todolistId].map(task => task.id === action.payload.taskId ? {\r\n                ...task,\r\n                entityStatus: action.payload.entityStatus\r\n            } : task)\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(todolist => {\r\n                 state[todolist.id] = []\r\n            })\r\n        })\r\n    }\r\n\r\n})\r\nexport const tasksReducer = slice.reducer\r\nexport const {\r\n    removeTaskAC,\r\n    addTaskAC,\r\n    updateTaskAC,\r\n    setTasksAC,\r\n    changeTaskEntityStatusAC\r\n} = slice.actions\r\n\r\n// export const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TASK':\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n//             }\r\n//         case 'ADD-TASK':\r\n//             return {\r\n//                 ...state,\r\n//                 [action.task.todoListId]: [{\r\n//                     ...action.task,\r\n//                     entityStatus: \"idle\"\r\n//                 }, ...state[action.task.todoListId]]\r\n//             }\r\n//         case 'UPDATE-TASK':\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolistId]: state[action.todolistId]\r\n//                     .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n//             }\r\n//         case 'ADD-TODOLIST':\r\n//             return {...state, [action.todolist.id]: []}\r\n//         case 'REMOVE-TODOLIST':\r\n//             const copyState = {...state}\r\n//             delete copyState[action.id]\r\n//             return copyState\r\n//         case 'SET-TODOLISTS': {\r\n//             const copyState = {...state}\r\n//             action.todolists.forEach(tl => {\r\n//                 copyState[tl.id] = []\r\n//             })\r\n//             return copyState\r\n//         }\r\n//         case 'SET-TASKS': {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolistId]: action.tasks.map(task => ({\r\n//                     ...task,\r\n//                     entityStatus: \"idle\"\r\n//                 }))\r\n//             }\r\n//         }\r\n//         case \"DISABLED-TASK-STATUS\": {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n//                     ...t,\r\n//                     entityStatus: action.entityStatus\r\n//                 } : t)\r\n//             }\r\n//         }\r\n//\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\n// export const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n//     type: 'REMOVE-TASK',\r\n//     taskId,\r\n//     todolistId\r\n// } as const)\r\n// export const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\n// export const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n//     type: 'UPDATE-TASK',\r\n//     model,\r\n//     todolistId,\r\n//     taskId\r\n// } as const)\r\n// export const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n//     type: 'SET-TASKS',\r\n//     tasks,\r\n//     todolistId\r\n// } as const)\r\n//\r\n//\r\n// export const changeTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: RequestStatusType) => ({\r\n//     type: 'DISABLED-TASK-STATUS',\r\n//     todolistId,\r\n//     taskId,\r\n//     entityStatus\r\n// } as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC({tasks, todolistId})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((res: AxiosError) => {\r\n            dispatch(setAppErrorAC({error: res.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTaskEntityStatusAC({\r\n        taskId: taskId,\r\n        todolistId: todolistId,\r\n        entityStatus: \"loading\"\r\n    }))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((res: AxiosError) => {\r\n            dispatch(setAppErrorAC({error: res.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n        .finally(() => {\r\n            dispatch(changeTaskEntityStatusAC({\r\n                taskId,\r\n                todolistId,\r\n                entityStatus: \"succeeded\"\r\n            }))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(changeTodolistEntityStatusAC({status: \"loading\", id: todolistId}))\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC({error: res.data.messages[0]}))\r\n                } else {\r\n                    dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                }\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch((res: AxiosError) => {\r\n            dispatch(setAppErrorAC({error: res.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n        .finally(() => {\r\n            dispatch(changeTodolistEntityStatusAC({status: \"succeeded\", id: todolistId}))\r\n        })\r\n}\r\n\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(changeTaskEntityStatusAC({taskId, entityStatus: \"loading\", todolistId}))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC({taskId, todolistId, model: domainModel})\r\n                dispatch(action)\r\n\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((res: AxiosError) => {\r\n                dispatch(setAppErrorAC({error: res.message}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            })\r\n            .finally(() => {\r\n                dispatch(changeTaskEntityStatusAC({\r\n                    taskId,\r\n                    todolistId,\r\n                    entityStatus: \"succeeded\"\r\n                }))\r\n            })\r\n\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ChangeTodolistActionType\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    entityStatus:RequestStatusType\r\n\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n    const onKeyPressTitle = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            activateViewMode ()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return editMode && props.entityStatus!==\"loading\"\r\n        ? <TextField onKeyPress={onKeyPressTitle} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    entityStatus:RequestStatusType\r\n    todoEntityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.entityStatus===\"loading\" || props.todoEntityStatus===\"loading\"}\r\n        />\r\n\r\n        <EditableSpan entityStatus={props.entityStatus} value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton disabled={props.entityStatus===\"loading\" || props.todoEntityStatus===\"loading\"}  onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport {fetchTasksTC, TaskDomainType} from '../tasks-reducer'\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskDomainType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n    entityStatus:RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan entityStatus={props.entityStatus} value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                entityStatus={t.entityStatus}\r\n                                                todoEntityStatus={props.entityStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({filter: value, id: todolistId})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                entityStatus={tl.entityStatus}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error:null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn  = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn ) {\r\n        return  <Navigate to= \"/\"/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n\r\n\r\n                <form onSubmit={formik.handleSubmit}>{/*функция для формика*/}\r\n                    <FormGroup>\r\n\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            // name=\"email\"\r\n                            // onChange={formik.handleChange}\r\n                            // onBlur={formik.handleBlur}\r\n                            {...formik.getFieldProps('email')}\r\n\r\n                        />\r\n\r\n                        {formik.touched.email && formik.errors.email\r\n                        && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\" label=\"Password\" margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel label={'Remember me'} control={\r\n                            <Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from '../Login/authReducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n                </Toolbar>\r\n                <div className={\"progressWrapper\"} style={{width: \"100%\", height: \"3px\",}}>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </div>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"login\" element={<Login/>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                    <Route path=\"/404\" element={<h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>}/>\r\n\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../Login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}